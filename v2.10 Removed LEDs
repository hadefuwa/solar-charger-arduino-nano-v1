/*
 * v2.10 Removed LEDs
 * This was done to reduce power consumption and run tests on batteries
 */

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "LowPower.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define pwmMax 255

int pwmPin = 6;
float batteryMaxV = 8.5;
float solarVoltage = 0.0;
float batteryVoltage = 0.0;

void readVoltages();
void oledDisplay();
void pwmAlgorithm();
void setupFunction();
void initialChecks();

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

void setup() 
{
  setupFunction();
  oledDisplay();
}

void loop() 
{
  readVoltages();
  pwmAlgorithm();
  oledDisplay();
  initialChecks();
}

void initialChecks()
{
  if (solarVoltage < batteryMaxV || solarVoltage < batteryVoltage)
  {
    display.ssd1306_command(SSD1306_DISPLAYOFF);
    for (int i = 0; i < 5; i++) // 8 seconds * 7 = 56 seconds
    {
      LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
    }
    display.ssd1306_command(SSD1306_DISPLAYON);
  }
}

void setupFunction()
{
  Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) 
  { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    //for(;;);
  }
  delay(1000);
  
  pinMode(pwmPin,OUTPUT); //set pin 6 to an output
  TCCR0B = TCCR0B & 0b11111000 | 0x05 ; // change the pwm frequency to 61Hz - prescaling 1024 
}

void pwmAlgorithm()
{
  if (batteryVoltage > batteryMaxV) //Float Stage Above 95% Charged
  {
    analogWrite(pwmPin, pwmMax * 0.5); //50% duty cycle
    display.println("-------");
    display.println("Float Stage");
  }
  else if (batteryVoltage > (batteryMaxV*0.9)) //Absorption Stage 90-95% Charged
  {
    analogWrite(pwmPin, pwmMax * 0.8); //80% duty cycle 
    display.println("-------");
    display.println("Absorption Stage");
  }
  else if (batteryVoltage < (batteryMaxV*0.9)) //Bulk Stage Below 90% Charged
  {
    analogWrite(pwmPin, pwmMax *0.95); //95% duty cycle
    display.println("-------");
    display.println("Bulk Stage");
  } 
}

void oledDisplay()
{
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.dim(true);
  display.setCursor(0, 10);
  display.print("Battery: ");
  display.print(batteryVoltage);
  display.println("V");
  display.println("-------");
  display.print("Solar Panel: ");
  display.print(solarVoltage);
  display.println("V");
  display.display();
  delay(100);
  display.clearDisplay();
}

void readVoltages()
{
  int sampleCount = 0;
  while (sampleCount < 50) 
  {
    solarVoltage += analogRead(A3);
    batteryVoltage += analogRead(A2);
    sampleCount++;
    //delay(5);
  }
    
  /*
   * read the voltage from the two voltage dividers, for solar and battery voltages
   * Divide by 50 samples
   * Multiply by 5V 
   * Divide by 1024 ADC values
   * Multiply by division factor R1 / R2 ... R1 = 10k , R2 = 1k
  */
  solarVoltage = (((float)solarVoltage / 50) * 5.0) / 1024.0 * 11;
  batteryVoltage = (((float)batteryVoltage / 50) * 5.0) / 1024.0 * 11;
}
